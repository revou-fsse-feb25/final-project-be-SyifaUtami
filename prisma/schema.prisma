// This is your updated Prisma schema file (Teacher model removed)
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

enum Role {
  STUDENT
  COORDINATOR
}

enum AssignmentStatus {
  OPEN
  CLOSED
}

enum SubmissionStatus {
  EMPTY        // No submission yet
  DRAFT        // Saved but not submitted
  SUBMITTED    // Submitted for grading
  UNSUBMITTED  // Deadline passed without submission
}

enum MaterialStatus {
  DONE
  NOT_DONE
}

// ACTUAL USERS (Only students and coordinators can login)
model User {
  id        String   @id @default(cuid())
  email     String?  @unique
  password  String?
  firstName String
  lastName  String?
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Student specific fields
  courseCode String? // "BM" or "BA"
  year       Int?

  // Coordinator specific fields  
  title         String?
  accessLevel   String?
  courseManaged String[] // Array of course codes they manage

  // Relations - as student (WITH CASCADE DELETION)
  studentAssignments StudentAssignment[] @relation("StudentSubmissions")
  studentProgress    StudentProgress[]
  
  // Relation to Student model (one-to-one for students only)
  student Student?
  
  @@map("users")
}

// STUDENTS (Extended student-specific data)
model Student {
  id         String   @id // Same as User.id
  userId     String   @unique // Foreign key to User
  courseCode String   // "BM" or "BA"
  year       Int
  
  // Student-specific fields
  enrollmentDate DateTime @default(now())
  studentNumber  String?  @unique // e.g., "2024001"
  status         String   @default("ACTIVE") // ACTIVE, INACTIVE, GRADUATED
  gpa           Float?   // Calculated GPA
  totalCredits  Int      @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  studentProgress StudentProgress[]   @relation("StudentProgressToStudent")
  submissions     StudentAssignment[] @relation("StudentSubmissionsToStudent")
  
  @@map("students")
}

// COURSES
model Course {
  id   String @id @default(cuid())
  code String @unique // "BM", "BA"
  name String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations (WITH CASCADE DELETION)
  units Unit[]

  @@map("courses")
}

// UNITS (subjects within courses)
model Unit {
  id          String @id @default(cuid())
  code        String @unique // "BM001", "BM002", "BA001", "BA002"
  name        String
  description String?
  courseCode  String
  currentWeek Int    @default(1)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations (WITH CASCADE DELETION)
  course          Course            @relation(fields: [courseCode], references: [code], onDelete: Cascade)
  assignments     Assignment[]
  studentProgress StudentProgress[]

  @@map("units")
}

// ASSIGNMENTS
model Assignment {
  id          String           @id // "BM0011", "BM0012", etc.
  name        String
  unitCode    String
  deadline    DateTime
  publishedAt DateTime
  status      AssignmentStatus
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations (WITH CASCADE DELETION)
  unit                Unit                @relation(fields: [unitCode], references: [code], onDelete: Cascade)
  studentAssignments  StudentAssignment[]

  @@map("assignments")
}

// STUDENT ASSIGNMENTS
model StudentAssignment {
  id               String           @id @default(cuid())
  submissionId     String           @unique // "SUB_s001_BM0011_1"
  studentId        String
  assignmentId     String
  status           AssignmentStatus? // "open" or "closed" (assignment status) - optional
  submissionStatus SubmissionStatus @default(EMPTY)
  submissionName   String?
  submittedAt      DateTime?
  grade            Float?
  comment          String?
  gradedBy         String?
  gradedAt         DateTime?        // Added this field from your data
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations (WITH CASCADE DELETION)
  user       User       @relation("StudentSubmissions", fields: [studentId], references: [id], onDelete: Cascade, map: "student_assignments_user_fkey")
  student    Student    @relation("StudentSubmissionsToStudent", fields: [studentId], references: [id], onDelete: Cascade, map: "student_assignments_student_fkey")
  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  @@unique([studentId, assignmentId])
  @@map("student_assignments")
}

// STUDENT PROGRESS (weekly materials)
model StudentProgress {
  id              String         @id @default(cuid())
  studentId       String
  unitCode        String
  week1Material   MaterialStatus @default(NOT_DONE)
  week2Material   MaterialStatus @default(NOT_DONE)
  week3Material   MaterialStatus @default(NOT_DONE)
  week4Material   MaterialStatus @default(NOT_DONE)
  updatedBy       String?        // "coordinator"
  lastUpdated     DateTime       @default(now())
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations (WITH CASCADE DELETION)
  user    User    @relation(fields: [studentId], references: [id], onDelete: Cascade, map: "student_progress_user_fkey")
  student Student @relation("StudentProgressToStudent", fields: [studentId], references: [id], onDelete: Cascade, map: "student_progress_student_fkey")
  unit    Unit    @relation(fields: [unitCode], references: [code], onDelete: Cascade)

  @@unique([studentId, unitCode])
  @@map("student_progress")
}